'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var Portal = _interopDefault(require('react-minimalist-portal'));
var Transition = _interopDefault(require('react-transition-group/Transition'));
var noScroll = _interopDefault(require('no-scroll'));
var cx = _interopDefault(require('classnames'));
var screenfull = _interopDefault(require('screenfull'));

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".styles_overlay__CLSq- {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  background-color: black;\n  overflow: hidden;\n}\n\n.styles_column__2r45X {\n  position: absolute;\n  width: 30%;\n  top: 0;\n  bottom: 0;\n  cursor: pointer;\n  transition: opacity 200ms ease;\n  opacity: 0;\n}\n.styles_column__2r45X:hover {\n  opacity: 1;\n}\n.styles_leftColumn__1o3JT {\n  left: 0;\n}\n.styles_rightColumn__11u6O {\n  right: 0;\n}\n\n.styles_arrowButtonReturn__1qiWl {\n  height: 48px;\n  width: 48px;\n  position: absolute;\n  top: 8;\n  left: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: opacity 200ms ease;\n  opacity: 1;\n}\n\n.styles_arrowButton__2CLWF {\n  background-color: rgba(66, 66, 66, 0.54);\n  border-radius: 28px;\n  position: absolute;\n  top: 50%;\n  margin-top: -28px;\n  height: 56px;\n  width: 56px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: opacity 200ms ease;\n  opacity: 1;\n}\n.styles_arrowButtonHide__3elp4 {\n  opacity: 0;\n}\n.styles_arrowButtonLeft__1x_P- {\n  left: 28px;\n}\n.styles_arrowButtonRight__1u74H {\n  right: 28px;\n}\n\n.styles_image__24T34 {\n  position: absolute;\n  visibility: hidden;\n  opacity: 0;\n  transform: translateX(50px);\n  transition: opacity 500ms ease, transform 500ms ease;\n}\n.styles_imageOpen__2hZxy {\n  visibility: initial;\n  opacity: 1;\n  transform: translateX(0px);\n}\n";
var cssClasses = { "overlay": "styles_overlay__CLSq-", "column": "styles_column__2r45X", "leftColumn": "styles_leftColumn__1o3JT", "rightColumn": "styles_rightColumn__11u6O", "arrowButtonReturn": "styles_arrowButtonReturn__1qiWl", "arrowButton": "styles_arrowButton__2CLWF", "arrowButtonHide": "styles_arrowButtonHide__3elp4", "arrowButtonLeft": "styles_arrowButtonLeft__1x_P-", "arrowButtonRight": "styles_arrowButtonRight__1u74H", "image": "styles_image__24T34", "imageOpen": "styles_imageOpen__2hZxy" };
styleInject(css, { "insertAt": "top" });

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

// eslint-disable-next-line react/prop-types
function CloseArrow(_ref) {
  var className = _ref.className,
      props = objectWithoutProperties(_ref, ["className"]);

  return React__default.createElement(
    "div",
    _extends({ className: className }, props),
    React__default.createElement(
      "svg",
      { fill: "#ffffff", width: "24px", height: "24px", viewBox: "0 0 24 24" },
      React__default.createElement("path", { d: "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z" })
    )
  );
}

// eslint-disable-next-line react/prop-types
function PrevArrowButton(_ref2) {
  var className = _ref2.className,
      props = objectWithoutProperties(_ref2, ["className"]);

  return React__default.createElement(
    "div",
    _extends({ className: className }, props),
    React__default.createElement(
      "svg",
      { fill: "#ffffff", width: "36px", height: "36px", viewBox: "0 0 24 24" },
      React__default.createElement("path", { d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z" })
    )
  );
}

// eslint-disable-next-line react/prop-types
function NextArrowButton(_ref3) {
  var className = _ref3.className,
      props = objectWithoutProperties(_ref3, ["className"]);

  return React__default.createElement(
    "div",
    _extends({ className: className }, props),
    React__default.createElement(
      "svg",
      { fill: "#ffffff", width: "36px", height: "36px", viewBox: "0 0 24 24" },
      React__default.createElement("path", { d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z" })
    )
  );
}

var keycodes = {
  esc: 27,
  left: 37,
  right: 39
};

var GooglePhoto = function (_Component) {
  inherits(GooglePhoto, _Component);

  function GooglePhoto(props) {
    classCallCheck(this, GooglePhoto);

    var _this = possibleConstructorReturn(this, (GooglePhoto.__proto__ || Object.getPrototypeOf(GooglePhoto)).call(this, props));

    _this.handleOpen = function () {
      document.addEventListener('keydown', _this.handleKeydown);
      window.addEventListener('resize', _this.handleWindowResize);
      document.querySelector('*').addEventListener('mousemove', _this.handleMousemove);
      noScroll.on();
      if (_this.props.fullscreen && screenfull.enabled) {
        screenfull.request();
        screenfull.on('change', _this.handleScreenfullChange);
      }
    };

    _this.handleClose = function () {
      document.removeEventListener('keydown', _this.handleKeydown);
      window.removeEventListener('resize', _this.handleWindowResize);
      document.querySelector('*').removeEventListener('mousemove', _this.handleMousemove);
      screenfull.off('change', _this.handleScreenfullChange);
      noScroll.off();
    };

    _this.handleWindowResize = function () {
      _this.setState({ width: window.innerWidth, height: window.innerHeight });
    };

    _this.handleKeydown = function (e) {
      if (e.keyCode === keycodes.left && _this.props.keyboardNavigation) {
        _this.handleClickPrev();
      } else if (e.keyCode === keycodes.right && _this.props.keyboardNavigation) {
        _this.handleClickNext();
      } else if (e.keyCode === keycodes.esc && _this.props.closeOnEsc) {
        _this.handleClose();
        _this.props.onClose();
      }
    };

    _this.handleMousemove = function () {
      // Hide the actions buttons when move do not move for x seconds
      clearTimeout(_this.timeoutMouseIdle);
      if (_this.state.mouseIdle === true) {
        _this.setState({ mouseIdle: false });
      }
      _this.timeoutMouseIdle = setTimeout(function () {
        _this.setState({ mouseIdle: true });
      }, _this.props.mouseIdleTimeout);
    };

    _this.handleScreenfullChange = function () {
      if (!screenfull.isFullscreen && _this.props.open) {
        _this.props.onClose();
      }
    };

    _this.handleClickPrev = function () {
      if (_this.props.srcIndex !== 0) {
        _this.props.onClickPrev();
      }
    };

    _this.handleClickNext = function () {
      if (_this.props.src[_this.props.srcIndex + 1]) {
        _this.props.onClickNext();
      }
    };

    _this.handleClickCloseArrow = function () {
      _this.props.onClose();
    };

    _this.handleExited = function () {
      _this.setState({ showPortal: false });
    };

    _this.state = {
      width: typeof window !== 'undefined' ? window.innerWidth : 0,
      height: typeof window !== 'undefined' ? window.innerHeight : 0,
      mouseIdle: false,
      showPortal: props.open
    };
    return _this;
  }

  createClass(GooglePhoto, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.open) {
        this.handleOpen();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!this.props.open && nextProps.open) {
        this.handleOpen();
        this.setState({ showPortal: true });
      }
      if (this.props.open && !nextProps.open) {
        this.handleClose();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.props.open) {
        this.handleClose();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          open = _props.open,
          src = _props.src,
          srcIndex = _props.srcIndex,
          classes = _props.classes,
          transitionDuration = _props.transitionDuration,
          transitionStyles = _props.transitionStyles;
      var _state = this.state,
          width = _state.width,
          height = _state.height,
          mouseIdle = _state.mouseIdle,
          showPortal = _state.showPortal;

      var image = src[srcIndex];
      var wrapperImageStyle = {
        position: 'absolute',
        overflow: 'hidden',
        userSelect: 'none'
      };
      var imageWidth = image.width;
      var imageHeight = image.height;
      // Adjust image ratio max with window size
      if (imageWidth > width) {
        var ratio = width / imageWidth;
        imageHeight *= ratio;
        imageWidth *= ratio;
      }
      if (imageHeight > height) {
        var _ratio = height / imageHeight;
        imageHeight *= _ratio;
        imageWidth *= _ratio;
      }

      if (imageHeight > imageWidth || imageWidth < width) {
        wrapperImageStyle.left = (width - imageWidth) / 2;
        wrapperImageStyle.height = height;
        wrapperImageStyle.width = imageWidth;
      } else {
        wrapperImageStyle.top = (height - imageHeight) / 2;
        wrapperImageStyle.height = imageHeight;
        wrapperImageStyle.width = width;
      }
      if (height > imageHeight) {
        wrapperImageStyle.height = imageHeight;
        wrapperImageStyle.top = (height - imageHeight) / 2;
      } else if (width > imageWidth) {
        wrapperImageStyle.height = height;
        wrapperImageStyle.left = (width - imageWidth) / 2;
      }

      if (!showPortal) {
        return false;
      }

      return React__default.createElement(
        Portal,
        null,
        React__default.createElement(
          Transition,
          {
            'in': open,
            timeout: transitionDuration,
            appear: true,
            onExited: this.handleExited
          },
          function (state) {
            return React__default.createElement(
              'div',
              {
                className: classes.overlay,
                style: _extends({}, transitionStyles.default, transitionStyles[state])
              },
              React__default.createElement(
                'div',
                { style: wrapperImageStyle },
                src.map(function (source, index) {
                  return React__default.createElement('img', {
                    key: index,
                    src: source.src,
                    alt: source.alt,
                    width: wrapperImageStyle.width,
                    height: wrapperImageStyle.height,
                    className: cx(classes.image, defineProperty({}, classes.imageOpen, index === srcIndex))
                  });
                })
              ),
              srcIndex !== 0 && React__default.createElement(
                'div',
                {
                  className: cx(classes.column, classes.leftColumn),
                  onClick: _this2.handleClickPrev
                },
                React__default.createElement(PrevArrowButton, {
                  className: cx(classes.arrowButton, classes.arrowButtonLeft, defineProperty({}, classes.arrowButtonHide, mouseIdle))
                })
              ),
              src[srcIndex + 1] && React__default.createElement(
                'div',
                {
                  className: cx(classes.column, classes.rightColumn),
                  onClick: _this2.handleClickNext
                },
                React__default.createElement(NextArrowButton, {
                  className: cx(classes.arrowButton, classes.arrowButtonRight, defineProperty({}, classes.arrowButtonHide, mouseIdle))
                })
              ),
              React__default.createElement(CloseArrow, {
                className: cx(classes.arrowButtonReturn, defineProperty({}, classes.arrowButtonHide, mouseIdle)),
                onClick: _this2.handleClickCloseArrow
              })
            );
          }
        )
      );
    }
  }]);
  return GooglePhoto;
}(React.Component);

GooglePhoto.propTypes = {
  /**
   * Control if GooglePhoto is open or not
   */
  open: PropTypes.bool.isRequired,
  /**
   * An array containing valid images
   */
  src: PropTypes.arrayOf(PropTypes.shape({
    /**
     * Url of the media
     */
    src: PropTypes.string.isRequired,
    /**
     * Height of the media
     */
    height: PropTypes.number.isRequired,
    /**
     * Width of the media
     */
    width: PropTypes.number.isRequired
  })).isRequired,
  /**
   * Index of source to display
   */
  srcIndex: PropTypes.number.isRequired,
  /**
   * Is closable when user press esc key
   */
  closeOnEsc: PropTypes.bool,
  /**
   * Enable left and right arrow navigation
   */
  keyboardNavigation: PropTypes.bool,
  /**
   * The duration of the transition, in milliseconds see [react-transition-group docs](https://reactcommunity.org/react-transition-group/#Transition-prop-timeout)
   */
  transitionDuration: PropTypes.number,
  /**
   * The animation object see [react-transition-group docs](https://reactcommunity.org/react-transition-group/#Transition)
   */
  // eslint-disable-next-line
  transitionStyles: PropTypes.object,
  /**
   * Should open on fullscreen mode
   */
  fullscreen: PropTypes.bool,
  /**
   * Timeout before hidding the actions buttons when mouse do not move (milliseconds)
   */
  mouseIdleTimeout: PropTypes.number,
  /**
   * Function called when the previous image is requested
   */
  onClickPrev: PropTypes.func.isRequired,
  /**
   * Function called when the next image is requested
   */
  onClickNext: PropTypes.func.isRequired,
  /**
   * Function called when GooglePhoto is requested to be closed
   */
  onClose: PropTypes.func.isRequired,
  /**
   * @internal
   */
  classes: PropTypes.object
};

GooglePhoto.defaultProps = {
  classes: cssClasses,
  closeOnEsc: true,
  keyboardNavigation: true,
  fullscreen: false,
  mouseIdleTimeout: 5000,
  transitionDuration: 200,
  transitionStyles: {
    default: {
      transition: 'opacity 200ms ease-in-out',
      opacity: 0
    },
    entering: { opacity: 0 },
    entered: { opacity: 1 },
    exiting: { opacity: 0 }
  }
};

module.exports = GooglePhoto;
//# sourceMappingURL=index.js.map
