var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';

var webWorkerScript = '\n  self.addEventListener(\'message\', event => {\n    const url = event.data;\n    fetch(url, {\n        method: \'GET\',\n        mode: \'no-cors\',\n        cache: \'default\'\n    }).then(response => {\n        return response.blob();\n    }).then(_ => postMessage(url));\n  })\n';

var wrappedComponent = function wrappedComponent(WrappedComponent) {
  return function (props) {
    return React.createElement(WrappedComponent, props);
  };
};

var ImageWorker = function (_Component) {
  _inherits(ImageWorker, _Component);

  function ImageWorker(props) {
    _classCallCheck(this, ImageWorker);

    var _this = _possibleConstructorReturn(this, (ImageWorker.__proto__ || Object.getPrototypeOf(ImageWorker)).call(this, props));

    _this.worker = new Worker(URL.createObjectURL(new Blob([webWorkerScript], { type: 'application/javascript' })));
    _this.state = {
      isLoading: true,
      imgSrc: ''
    };

    _this.loadImage = function (url) {
      var image = new Image();
      _this.image = image;
      image.onload = _this.onLoad;
      image.src = url;
    };

    _this.onLoad = function () {
      _this.setState({
        imgSrc: _this.image.src,
        isLoading: false
      });
    };

    _this.worker.onmessage = function (event) {
      _this.loadImage(event.data);
    };
    return _this;
  }

  _createClass(ImageWorker, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.worker.postMessage(this.props.src);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.image) {
        this.image.onload = null;
        this.image.onerror = null;
      }
      this.worker.terminate();
    }
  }, {
    key: 'renderPlaceholder',
    value: function renderPlaceholder() {
      var _props = this.props,
          placeholder = _props.placeholder,
          style = _props.style;

      if (typeof placeholder === 'function') {
        var PlaceholderComponent = wrappedComponent(placeholder);
        return React.createElement(PlaceholderComponent, null);
      } else if (typeof placeholder === 'string') {
        return React.createElement('img', { src: placeholder, style: Object.assign({}, style), alt: 'placeholder' });
      } else {
        return null;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          style = _props2.style,
          imageClass = _props2.imageClass,
          containerClass = _props2.containerClass;

      return React.createElement(
        'div',
        { className: containerClass },
        this.state.isLoading ? this.renderPlaceholder() : React.createElement('img', { src: this.state.imgSrc,
          style: Object.assign({}, style), className: imageClass, alt: 'worker' })
      );
    }
  }]);

  return ImageWorker;
}(Component);

export default ImageWorker;
