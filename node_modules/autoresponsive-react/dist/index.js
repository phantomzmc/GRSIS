'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var Core = require('autoresponsive-core');

var GridSort = Core.GridSort;


var AnimationManager = require('./animation');

var noop = function noop() {};

var AutoResponsive = function (_React$Component) {
  _inherits(AutoResponsive, _React$Component);

  function AutoResponsive(props) {
    _classCallCheck(this, AutoResponsive);

    var _this = _possibleConstructorReturn(this, (AutoResponsive.__proto__ || Object.getPrototypeOf(AutoResponsive)).call(this, props));

    _this.state = {};
    return _this;
  }

  _createClass(AutoResponsive, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.sortManager = new GridSort({
        containerWidth: this.props.containerWidth,
        gridWidth: this.props.gridWidth
      });

      this.animationManager = new AnimationManager();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.containerWidth !== nextProps.containerWidth) {
        this.sortManager.changeProps({
          containerWidth: nextProps.containerWidth
        });
      }
    }
  }, {
    key: 'setPrivateProps',
    value: function setPrivateProps() {
      this.containerStyle = {
        position: 'relative',
        height: this.containerHeight || 0
      };

      if (typeof this.props.containerHeight === 'number') {
        this.fixedContainerHeight = true;
        this.containerStyle.height = this.props.containerHeight;
      } else {
        this.fixedContainerHeight = false;
      }
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate() {
      this.sortManager.init();
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      var _this2 = this;

      return React.Children.map(this.props.children, function (child, childIndex) {
        if (child.props.className && _this2.props.itemClassName && !~child.props.className.indexOf(_this2.props.itemClassName)) {
          return;
        }

        var childWidth = parseInt(child.props.style.width, 10) + _this2.props.itemMargin;
        var childHeight = parseInt(child.props.style.height, 10) + _this2.props.itemMargin;

        var calculatedPosition = _this2.sortManager.getPosition(childWidth, childHeight);

        if (!_this2.fixedContainerHeight && _this2.props.containerWidth) {
          if (calculatedPosition[1] + childHeight > _this2.containerStyle.height) {
            _this2.containerStyle.height = calculatedPosition[1] + childHeight;
          }
        }

        var options = Object.assign({}, _this2.props, {
          position: calculatedPosition,
          size: {
            width: childWidth,
            height: childHeight
          },
          containerHeight: _this2.containerStyle.height,
          itemMargin: _this2.props.itemMargin
        });

        var calculatedStyle = _this2.animationManager.generate(options);

        _this2.mixItemInlineStyle(calculatedStyle);

        _this2.props.onItemDidLayout.call(_this2, child);

        if (childIndex + 1 === _this2.props.children.length) {
          _this2.props.onContainerDidLayout.call(_this2);
        }

        return React.cloneElement(child, {
          style: Object.assign({}, child.props.style, calculatedStyle)
        });
      });
    }
  }, {
    key: 'mixItemInlineStyle',
    value: function mixItemInlineStyle(s) {
      var itemMargin = this.props.itemMargin;
      var style = {
        display: 'block',
        float: 'left',
        margin: '0 ' + itemMargin + 'px ' + itemMargin + 'px 0'
      };

      if (this.props.containerWidth) {
        style = {
          position: 'absolute'
        };
      }
      Object.assign(s, style);
    }
  }, {
    key: 'getContainerStyle',
    value: function getContainerStyle() {
      return this.containerStyle;
    }
  }, {
    key: 'render',
    value: function render() {
      this.setPrivateProps();

      return React.createElement(
        'div',
        { ref: 'container', className: this.props.prefixClassName + '-container', style: this.getContainerStyle() },
        this.renderChildren()
      );
    }
  }]);

  return AutoResponsive;
}(React.Component);

AutoResponsive.defaultProps = {
  containerWidth: null,
  containerHeight: null,
  gridWidth: 10,
  prefixClassName: 'rc-autoresponsive',
  itemClassName: 'item',
  itemMargin: 0,
  horizontalDirection: 'left',
  transitionDuration: 1,
  transitionTimingFunction: 'linear',
  verticalDirection: 'top',
  closeAnimation: false,
  onItemDidLayout: noop,
  onContainerDidLayout: noop
};

module.exports = AutoResponsive;